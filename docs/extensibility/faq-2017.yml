### YamlMime:FAQ
metadata:
  title: 扩展性常见问题
  description: 本文解答了有关 Visual Studio 2017 的扩展性的一些常见问题解答。
  ms.custom: SEO-VS-2020
  ms.date: 11/09/2016
  ms.topic: faq
  ms.assetid: 345855db-0cc3-45aa-8c57-bb18d9789772
  author: kevinfansler
  ms.author: madsk
  manager: jmartens
  monikerRange: vs-2017
  ms.openlocfilehash: 36ddd78fce9d1b6808d293c0448a80d4d1fded8e
  ms.sourcegitcommit: 5d924362a4333821f9804f20e59d847afaea932f
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 02/18/2022
  ms.locfileid: "139087864"
title: Visual Studio 2017 扩展性常见问题解答
summary: 下面是有关 Visual Studio 2017 的扩展性的一些常见问题解答。
sections:
- name: 忽略
  questions:
  - question: >
      扩展的后向兼容性部分是什么？
    answer: >
      新的 vsix v3 格式将与 VSIX v2 向后兼容，因此，你仍可以使用单个具有支持 Visual Studio 2012 和更高版本的 vsix ID 的 vsix。 新的 VSIX v3 格式不支持 Visual 2010 及更早版本。 若要支持 Visual Studio 2010，将需要创建一个单独的扩展 (，并) 单独的 VSIX ID。 由于 Visual Studio 2010 现在是用户群的一小部分，因此我们建议你使用支持 Visual Studio 2012 或更高版本的扩展的现有 vsix id，并向 Visual Studio 2010 版本分配新的 vsix id。
  - question: >
      为什么需要声明 Visual Studio 2017 的先决条件？
    answer: >
      Visual Studio 2017 使用户能够更快、更轻薄地安装 Visual Studio，从而为用户提供对安装的工作负载和组件的更多控制。 若要确保你的扩展所需的组件已安装，并且具有 VSIX v3 和 Visual Studio 2017，你必须将扩展所依赖的组件声明为必备组件。 如果用户的计算机上未提供任何所需的先决条件，用户将无法运行该扩展。 但是，如果 Visual Studio 检测到用户正在尝试安装的扩展需要缺少的组件，则会提示用户安装所需的组件。 如果有可选组件，则无需将它们作为必备组件列出，前提是在运行时执行适当的功能检测。 所有扩展都必须将核心编辑器组件指定为依赖项 `Microsoft.VisualStudio.Component.CoreEditor` 。
  - question: >
      当你说必备组件时，你的意思是什么？
    answer: >
      您可以在组件级别声明必备组件，即，可以在 UI 中选择的各个选项。 不会在工作负荷或单个 Dll 上声明必备组件。
  - question: >
      在哪里可以找到组件 Id 的列表，以便声明依赖项？
    answer: >
      若要查找组件 id 列表，请查看[Visual Studio 2017 工作负荷和组件 id](../install/workload-and-component-ids.md?view=vs-2019&preserve-view=true)。 如果不确定哪个组件包含特定的二进制文件，则可以下载该 [组件 > 二进制映射电子表格](https://aka.ms/vs2017componentid-binaries)。 有关使用电子表格的详细信息，请参阅 [如何：将扩展性项目迁移到 Visual Studio 2017](how-to-migrate-extensibility-projects-to-visual-studio-2017.md)中的 **查找组件 id** 部分。
  - question: >
      我的扩展需要 Visual Studio 15.3，如何强制实施该需求？
    answer: >
      例如，如果你的扩展需要 Visual Studio 2017 的特定版本，则它依赖于15.3 中发布的一项功能，你可以在 VSIX **InstallationTarget** 中指定内部版本号。 例如，版本15.3 的生成号为 "15.0.26730.3"。 可在 [此处](../install/visual-studio-build-numbers-and-release-dates.md)查看生成编号的版本映射。 请注意，使用版本号 "15.3" 将不能正常工作。


      如果扩展需要15.3 或更高版本，则需要将 **InstallationTarget 版本** 声明为 [15.0.26730.3，16.0) ：


      ```xml

      <Installation>
        <InstallationTarget Id="Microsoft.VisualStudio.Community" Version="[15.0.26730.3, 16.0)" />
      </Installation>

      ```


      VSIXInstaller 将检测 Visual Studio 的早期版本，并通知用户需要更高版本的更新。
  - question: >
      我在尝试上传扩展时仍遇到错误。
    answer: >
      您可以使用旧版本的 VSIX 清单。 如果你的扩展标记为支持 Visual Studio 2017，但未使用新的 VSIX v3 清单格式，则将无法上传。
  - question: >
      我使用自己的安装程序。 我可以继续执行此操作吗？
    answer: >
      Visual Studio 2017，Visual Studio 的最小安装将明显小于以前的版本。


      我们增强了 VSIX 清单格式以支持轻型安装所需的更改。 我们建议您尽可能以 VSIX v3 格式提供扩展。 在某些情况下，你可能需要维护现有的安装程序，如在 Visual Studio 之外安装组件。


      例如，如果需要 MSBuild，则应将其指定为 VSIX 清单中的必备项。 安装 VSIX 时，安装程序将确保 MSBuild 可用。


      然后，安装程序将调用 VSIXInstaller，以使用 Visual Studio 2017 组件安装 VSIX。
  - question: >
      是否可以为我增加迁移指导？
    answer: >
      有关详细信息，请参阅[如何：将扩展性项目迁移到 Visual Studio 2017](how-to-migrate-extensibility-projects-to-visual-studio-2017.md)。 此外，还提供了一个很好的博客文章、对[Visual Studio 安装程序的更改](https://devblogs.microsoft.com/setup/changes-to-visual-studio-15-setup/)。
  - question: >
      如何实现是否注册包？
    answer: >
      按照注册条目之前的方式对注册进行打包。 唯一的更改是注册表现在正在改道发往，必须从 *.pkgdef* 文件声明注册表项。


      如果你使用 `PackageRegistrationAttribute` ，则会自动发生这种情况。
  - question: >
      我的扩展是否需要新的库条目 Visual Studio 2017 版？
    answer: >
      不需要，如果所做的更改与所有支持的版本完全向后兼容，则不需要在 Visual Studio 库中为已更新的 VSIX 提供新条目。 如果扩展不是向后兼容的，我们建议将扩展拆分为多个 VSIXs (即使暂时) ，每个都具有其自己的 VSIX ID 和库项。
  - question: >
      对于当前支持 Visual Studio 2010 及更高版本的扩展，我该怎么办？
    answer: >
      将 Visual Studio 2017 的支持添加到当前 VSIX 并维护对 Visual Studio 2012 及更高版本的支持。 此外，使用新的 GUID 和库条目) 创建新的 VSIX (，并支持 Visual Studio 2010。
  - question: >
      是否可以使用 Visual Studio 2015 生成 VSIX v3？
    answer: >
      是。 有一个 NuGet 包，其中包含在 Visual Studio 2015 中生成 VSIX v3 格式清单所需的工具和任务。 向扩展性项目添加对 NuGet 包 `Microsoft.VisualStudio.Sdk.BuildTasks.14.0` 的引用。 还需要将指定 `v3` 的 `VsixType` 元素添加到项目文件中：


      ```xml
        <VsixType>v3</VsixType>
      ```
  - question: >
      能否在安静模式下运行 VSIXInstaller？
    answer: >
      现在，需要将其他参数传递给 VSIXInstaller，因为安装了多个 Visual Studio 2017 的实例。


      ```bash

      vsixinstaller.exe /q /appidinstallpath:"c:\program files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\devenv.exe" /appidname:"Visual Studio" /logFile:<path to log file> /skuName:Enterprise /skuVersion:15.0.25810.0 "KendoUI.Mvc.VSPackage.vsix"

      ```
  - question: >
      为什么 VSIXInstaller 现在会在安装 VSIX 之前等待进程退出？
    answer: >
      VSIXInstaller 现在使用 Visual Studio 安装引擎来安装 VSIX 定义的任何系统必备组件。 安装引擎要求所有 VS 相关进程退出，然后才能更新 Visual Studio 安装。
  - question: >
      我现在是否可以将我的扩展资产安装到任何具有 VSIX v3 的位置？
    answer: >-
      不可以，VSIX v3 `InstallRoot` 属性不允许安装 Visual Studio 安装文件夹结构之外的任何内容。 有关支持的位置，请参阅在 [extension 文件夹外安装](set-install-root.md) 主题。


      不属于 Visual Studio 的扩展组件可能会在计算机上单一实例，并为所有 Visual Studio 2017 实例安装一次。


      此方案的建议是为非 Visual Studio 组件创作 msi，并使 msi 调用 VSIXInstaller 来安装 Visual Studio 特定组件。
